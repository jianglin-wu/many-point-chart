{"version":3,"file":"index.min.js","sources":["../src/scripts/modul.js","../src/main.js","../src/scripts/dom.js","../src/scripts/utils.js","../src/scripts/event-emitter.js"],"sourcesContent":["import { readKeyValue } from './utils'\n\n/**\n * 事件是否在路径中\n */\nexport function isInPath (ctx, e, type, parames) {\n  ctx.beginPath()\n  if (type === 'point') {\n    const { x, y, radius, radian } = parames\n    ctx.moveTo(x, y)\n    ctx.arc(x, y, radius, 0, radian, true)\n  } else if (type === 'rect') {\n    const { x, y, w, h } = parames\n    ctx.rect(x, y, w, h)\n  }\n  const ret = ctx.isPointInPath(e.offsetX, e.offsetY)\n  ctx.closePath()\n  return ret\n}\n\n\n/**\n * 绘制圆点虚线\n */\nexport function dottedLine (ctx, x1, y1, x2, y2, interval) {\n  if (!interval) {\n    interval = 5\n  }\n  var isHorizontal = true\n  if (x1 == x2) {\n    isHorizontal = false\n  }\n  var len = isHorizontal ? x2 - x1 : y2 - y1\n  ctx.moveTo(x1, y1)\n  var progress = 0\n  while (len > progress) {\n    progress += interval\n    if (progress > len) {\n      progress = len\n    }\n    if (isHorizontal) {\n      ctx.moveTo(x1 + progress, y1)\n      ctx.arc(x1 + progress, y1, 1, 0, Math.PI * 2, true)\n      ctx.fill()\n    } else {\n      ctx.moveTo(x1, y1 + progress)\n      ctx.arc(x1, y1 + progress, 1, 0, Math.PI * 2, true)\n      ctx.fill()\n    }\n  }\n}\n\n/**\n * 刻度线\n */\nexport function drawScale(ctx, location, parames) {\n  const { x, y, w, h } = location\n  const { title, keyName, lineWidth, strokeStyle, fillStyle } = parames\n  ctx.lineWidth = lineWidth\n  ctx.strokeStyle = strokeStyle\n  ctx.fillStyle = fillStyle\n  ctx.beginPath()\n  ctx.moveTo(x, y)\n  ctx.lineTo(x + w, y)\n  ctx.stroke()\n  return function (data) {\n    const XList = []\n    const startY = y + lineWidth\n    const surplusH = h - lineWidth\n    const scaleHeight = surplusH * 0.3\n    const fontSize = surplusH * 0.5\n    const textTop = startY + scaleHeight + (surplusH * 0.2) + fontSize\n    const scaleCount = data.length\n    let span = w / (scaleCount + 1)\n    let offsetLeft = x + span\n\n    // 设置title\n    ctx.lineWidth = lineWidth\n    ctx.strokeStyle = strokeStyle\n    ctx.fillStyle = fillStyle\n    ctx.textAlign = 'left'\n    ctx.font = fontSize + 'px Arial'\n    ctx.fillText(title, x, textTop, span / 1.5)\n    ctx.beginPath()\n    data.forEach((item) => {\n      const name = readKeyValue(item, keyName)\n      ctx.moveTo(offsetLeft, startY)\n      ctx.lineTo(offsetLeft, startY + scaleHeight)\n      ctx.textAlign = 'center'\n      ctx.font = fontSize + 'px Arial'\n      ctx.fillText(name, offsetLeft, textTop, span * 0.8)\n      XList.push({\n        name,\n        span,\n        offsetLeft,\n      })\n      offsetLeft += span\n    })\n    ctx.stroke()\n    return XList\n  }\n}\n\n\n\n/**\n * 单张表中的图\n */\nexport function singleChart(ctx, location, parames) {\n  const { x, y, w, h } = location\n  const { topShow, bottomShow, gridSpacingY } = parames\n  const lineWidth = 1\n  let thisGridSpacingY = gridSpacingY\n\n  if (topShow || bottomShow) {\n    ctx.setLineDash([])\n    ctx.strokeStyle = '#000'\n    ctx.lineWidth = lineWidth\n    ctx.beginPath()\n    // 顶部线条\n    if (topShow) {\n      ctx.moveTo(x, y + lineWidth)\n      ctx.lineTo(x + w, y + lineWidth)\n    }\n    // 底部线条\n    if (bottomShow) {\n      ctx.moveTo(x, y + h - lineWidth)\n      ctx.lineTo(x + w, y + h - lineWidth)\n    }\n    ctx.stroke()\n  }\n\n  const gridCount = parseInt(h / thisGridSpacingY, 10)\n  thisGridSpacingY += (h % thisGridSpacingY) / gridCount\n  let gridTop = y\n  ctx.beginPath()\n  for (let i = 1; i < gridCount; i++) {\n    gridTop　+= thisGridSpacingY\n    ctx.strokeStyle = '#ccc'\n    // ctx.strokeStyle = '#eee'\n    // // 绘制圆点虚线\n    // dottedLine(ctx, x - 4, gridTop, x + w, gridTop, 8)\n\n    // 绘制方块虚线\n    ctx.setLineDash([5, 2, 25, 10])\n    ctx.moveTo(x, gridTop)\n    ctx.lineTo(x + w, gridTop)\n  }\n  ctx.stroke()\n}\n\n\n\n/**\n * 图表\n */\nexport function drawTables(ctx, location, parames) {\n  const { x, y, w, h } = location\n  const { tables, offsetLeft, scaleTop, gridSpacingY } = parames\n  const fontSize = 12\n  const textWidth = offsetLeft * 0.8\n  const tableHeight = h / tables.length\n  ctx.textAlign = 'right'\n  ctx.font = fontSize + 'px Arial'\n  const lastBottomShow = scaleTop - (y + h) > h * 0.01\n  tables.forEach(({ title, fillStyle }, index) => {\n    const chartY = y + (tableHeight * index)\n    const textY = (tableHeight + fontSize) / 2 + chartY\n    ctx.fillStyle = fillStyle\n    ctx.fillText(title, textWidth, textY, textWidth)\n    singleChart(ctx, {\n        x: offsetLeft,\n        y: chartY,\n        w: w - offsetLeft,\n        h: tableHeight,\n      }, {\n        topShow: index === 0,\n        gridSpacingY,\n        bottomShow: index === tables.length - 1 ? lastBottomShow : true,\n    })\n  })\n  return function (XList, data) {\n    return tables.map((table, tableIndex) => {\n      const {\n        keyName, min, max, setPercentage, lineWidth,\n        pointRadius, pointRadian, fillStyle, strokeStyle,\n      } = table\n      const chartY = y + (tableHeight * tableIndex)\n      const difference = max - min\n      ctx.setLineDash([])\n      ctx.strokeStyle = strokeStyle\n      ctx.fillStyle = fillStyle\n      ctx.lineWidth = lineWidth\n\n      ctx.beginPath()\n      const pointList = XList.map(({ name, span, offsetLeft }, xIndex) => {\n        const x = offsetLeft\n        let values = data[xIndex][keyName]\n        const setLint = (value, index = 0) => {\n          let percentage = setPercentage(value, difference, min)\n          const y = chartY + tableHeight - (tableHeight * percentage)\n          if (xIndex === 0 && index === 0) {\n            ctx.moveTo(x, y)\n          } else {\n            ctx.lineTo(x, y)\n          }\n          return { y, percentage, value }\n        }\n        if (Array.isArray(values)) {\n          values = values.map(setLint)\n        } else if (typeof values === 'number') {\n          values = setLint(values)\n        } else {\n          values = []\n        }\n        return { name, values, x, span }\n      })\n      ctx.stroke()\n\n      // 设置圆点\n      pointList.forEach(({ values, x }) => {\n        values.forEach(({ y }) => {\n          ctx.beginPath()\n          ctx.arc(x, y, pointRadius, 0, pointRadian, true)\n          ctx.fill()\n          ctx.stroke()\n        })\n      })\n      return { pointList, chartY, tableHeight }\n    })\n  }\n}\n","import EventEmitter from './scripts/event-emitter.js'\nimport { logs, setPercentageDefault } from './scripts/utils'\nimport { drawScale, drawTables, isInPath } from './scripts/modul'\nimport { getCanvasElement } from './scripts/dom'\n\nclass ManyPoint extends EventEmitter {\n  constructor (el, config) {\n    super()\n    this.ctx = null\n    this.options = null\n    this.data = null\n    this.scaleList = null\n    this.pointAllList = null\n    this.eventList = []\n    this.config = config\n    this.canvas = getCanvasElement(el)\n    this.initCanvas()\n  }\n\n  /**\n   * 初始化操作\n   */\n  initCanvas () {\n    const { width, height } = this.config\n    this.canvas.setAttribute('width', width)\n    this.canvas.setAttribute('height', height)\n    this.ctx = this.canvas.getContext('2d')\n  }\n\n  /**\n   * 设置默认值\n   */\n  setOptions ({ scale = {}, chart = {}}) {\n    const options = {}\n    options.scale = (({\n      title = '杆号', keyName　= 'pole.poleName', height = 30,\n      lineWidth = 1, strokeStyle = '#000', fillStyle = '#000',\n    }) => {\n      return { title, keyName, height, lineWidth, strokeStyle, fillStyle }\n    })(scale)\n    options.chart = (({ offsetLeft = 100, tables = [], tablesHeight = 0, gridSpacingY = 20 }) => {\n      const newChart = {}\n      newChart.offsetLeft = offsetLeft\n      newChart.tablesHeight = tablesHeight\n      newChart.gridSpacingY = gridSpacingY\n      newChart.tables = tables.map(({\n        title = '表名', keyName = '', min = 0, max = 100,\n        setPercentage = null, pointRadius = 6, pointRadian = 360 * Math.PI / 180,\n        fillStyle = '#000', strokeStyle = '#000', lineWidth = 1,\n      }) => {\n        return {\n          title, keyName, lineWidth, min, max, pointRadius, pointRadian,\n          setPercentage: setPercentage || setPercentageDefault,\n          fillStyle, strokeStyle,\n        }\n      })\n      return newChart\n    })(chart)\n    return this.options = options\n  }\n\n  /**\n   * 绘制图表\n   */\n  draw (options, data) {\n    this.setOptions(options)\n    if (this.data) {\n      this.clear()\n      this.removeEvents()\n    }\n    this.data = data\n    this.layout()\n  }\n\n  layout () {\n    const { ctx, config, options, data } = this\n    const { width, height } = config\n    const { scale, chart } = options\n    const { offsetLeft, tablesHeight, tables, gridSpacingY } = chart\n    const scaleHeight = scale.height\n    const scaleTop = height - scaleHeight\n\n    ctx.fillStyle = '#fff'\n    ctx.fillRect(0, 0, width, height)\n\n    this.scaleList = drawScale(ctx, {\n        x: offsetLeft,\n        y: height - scaleHeight,\n        w: width - offsetLeft,\n        h: scaleHeight,\n      },\n      scale,\n    )(data)\n    this.pointAllList = drawTables(ctx, {\n        x: 0,\n        y: 0,\n        w: width - 0,\n        h: tablesHeight || scaleTop,\n      }, {\n        offsetLeft,\n        tables,\n        scaleTop,\n        gridSpacingY,\n    })(this.scaleList, data)\n    this.watchEvents()\n  }\n\n  /**\n   * 清除画板\n   */\n  clear () {\n    const ctx = this.ctx\n    const { width, height } = this.config\n    ctx.clearRect(0, 0, width, height)\n  }\n\n  /**\n   * 生成事件处理函数\n   */\n  generateEventListener (\n    eventName,\n    trigger,\n    tableTrigger,\n    axisXTrigger,\n    pointTrigger,\n    tableNoTrigger,\n    axisXNoTrigger,\n    pointNoTrigger,\n  ) {\n    const ctx = this.ctx\n    const options = this.options\n    const pointAllList = this.pointAllList\n    const that = this\n    function eventListener (e) {\n      let isThisInPointPath = false\n      let isThisInAxisX = false\n      let isThisInTable = false\n\n      if (!trigger) {\n        return\n      }\n      trigger(e)\n      pointAllList.forEach(({ pointList, chartY, tableHeight }, tableIndex) => {\n        pointList.forEach(({ values, x, name, span }, xIndex) => {\n          const pointListWidth = (pointList.length + 1) * span\n          const tableLocation = {\n            x: pointList[0].x - span,\n            y: chartY,\n            w: pointListWidth,\n            h: tableHeight,\n          }\n          const axisXLocation = {\n            x: x - (span / 2),\n            y: chartY,\n            w: span,\n            h: tableHeight,\n          }\n          if (isInPath(ctx, e, 'rect', tableLocation) && xIndex === 0 && tableTrigger) {\n            tableTrigger(e, tableLocation, { tableIndex })\n            isThisInTable = true\n          }\n          if (isInPath(ctx, e, 'rect', axisXLocation) && axisXTrigger) {\n            axisXTrigger(e, axisXLocation, { tableIndex, xIndex })\n            isThisInAxisX = true\n          }\n          values.forEach(({ y }, valueIndex) => {\n            const tableOptions = options.chart.tables[tableIndex]\n            const pointLocation = {\n              x: x,\n              y: y,\n              radius: tableOptions.pointRadius,\n              radian: tableOptions.pointRadian,\n            }\n            const indexs = {\n              tableIndex,\n              xIndex,\n              valueIndex,\n            }\n            if(isInPath(ctx, e, 'point', pointLocation) && pointTrigger) {\n              pointTrigger(e, pointLocation, indexs)\n              isThisInPointPath = true\n            }\n          })\n        })\n      })\n\n      // 当前事件没有在路径中触发\n      if (!isThisInTable && tableNoTrigger) {\n        tableNoTrigger(e)\n      }\n      if (!isThisInAxisX && axisXNoTrigger) {\n        axisXNoTrigger(e)\n      }\n      if (!isThisInPointPath && pointNoTrigger) {\n        pointNoTrigger(e)\n      }\n    }\n    this.eventList.push({ eventName, eventListener })\n    this.canvas.addEventListener(eventName, eventListener);\n    return eventListener\n  }\n\n  /**\n   * 注册监听事件\n   */\n  watchEvents () {\n    const that = this\n    let isInTable = false\n    let isInAxisX = false\n    let isInPointPath = false\n\n    // 注册移入事件\n    this.generateEventListener(\n      'mouseenter',\n      function mouseenter(e) {\n        that.emit('mouseenter', e)\n      }\n    )\n\n    // 注册移动事件\n    this.generateEventListener(\n      'mousemove',\n      function mousemove(e) {\n        that.emit('mousemove', e)\n      },\n      function tableMousemove(e, location, indexs) {\n        if (isInTable) {\n          that.emit('tableMousemove', e, location, indexs)\n        } else {\n          that.emit('tableMouseenter', e, location, indexs)\n          isInTable = true\n        }\n      },\n      function axisXMousemove(e, location, indexs) {\n        if (isInAxisX) {\n          that.emit('axisXMousemove', e, location, indexs)\n        } else {\n          that.emit('axisXMouseenter', e, location, indexs)\n          isInAxisX = true\n        }\n      },\n      function pointMousemove(e, location, indexs) {\n        if (isInPointPath) {\n          that.emit('pointMousemove', e, location, indexs)\n        } else {\n          that.emit('pointMouseenter', e, location, indexs)\n          isInPointPath = true\n        }\n      },\n      function tableMouseleave(e, indexs) {\n        if (isInTable) {\n          isInTable = false\n          that.emit('tableMouseleave')\n        }\n      },\n      function axisXMouseleave(e, indexs) {\n        if (isInAxisX) {\n          isInAxisX = false\n          that.emit('axisXMouseleave')\n        }\n      },\n      function pointMouseleave(e, indexs) {\n        if (isInPointPath) {\n          isInPointPath = false\n          that.emit('pointMouseleave')\n        }\n      },\n    )\n\n    // 注册移出事件\n    this.generateEventListener(\n      'mouseleave',\n      function mouseleave(e) {\n        that.emit('mouseleave', e)\n        isInPointPath = false\n        isInAxisX = false\n        isInTable = false\n      }\n    )\n\n    // 注册点击事件\n    this.generateEventListener(\n      'click',\n      function click(e) {\n        that.emit('click', e)\n      },\n      function tableClick(e, location, indexs) {\n        that.emit('tableClick', e, location, indexs)\n      },\n      function axisXClick(e, location, indexs) {\n        that.emit('axisXClick', e, location, indexs)\n      },\n      function pointClick(e, location, indexs) {\n        that.emit('pointClick', e, location, indexs)\n      },\n    )\n  }\n\n  /**\n   * 清除所有事件\n   */\n  removeEvents () {\n    const canvas = this.canvas\n    const eventList = this.eventList\n    eventList.forEach(({ eventName, eventListener }) => {\n      canvas.removeEventListener(eventName, eventListener)\n    })\n    this.eventList = []\n  }\n}\n\nexport default ManyPoint\n","\n/**\n * 获取元素\n */\nexport function getCanvasElement(el) {\n  let canvas = null\n  if (typeof el === 'string') {\n    canvas = document.getElementById(el)\n  } else {\n    canvas = el\n  }\n  if (!canvas || !canvas.getContext) {\n    logs('error', 'Elements do not exist or browsers do not support!')\n    return false;\n  }\n  return canvas\n}\n","\nexport function logs (type, message) {\n  if (typeof type !== 'string' || console[type] === undefined) {\n    console.error('Logs function \"type\" parameter invalid!')\n    return\n  }\n  if (type === 'error') {\n    throw new Error(message)\n\n  }\n  console[type](message)\n}\n\nexport function inherit(prototype) {\n  if (prototype === null) {\n    throw new TypeError('Prototype object of inherit(prototype) cannot be null.');\n  }\n  if (Object.create) {\n    return Object.create(prototype.prototype);\n  }\n  var type = typeof prototype;\n  if (type !== 'object' && type !== 'function') {\n    throw new TypeError('Prototype object of inherit(prototype) is not an object or a function.');\n  }\n  var constructor = new Function('');\n  constructor.prototype = prototype.prototype;\n  return new constructor();\n}\n\nexport function defineSubClass(baseClassConstructor, subClassConstructor) {\n  subClassConstructor.prototype = inherit(baseClassConstructor);\n  subClassConstructor.prototype.constructor = subClassConstructor;\n}\n\n/**\n * 读取键名\n * 如：对象 object, 传入字符串 \"a.b.c\"，读取为 object[a][b][c]\n */\nexport function readKeyValue (object, keyNames) {\n  let target = object\n  keyNames.split('.').forEach((keyName) => {\n    target = target[keyName]\n  })\n  return target\n}\n\n/**\n * 计算百分比\n */\nexport function setPercentageDefault (value, difference, min) {\n  return (value - min) / difference\n}\n","/**********************************************************/\n/*                                                        */\n/*                       事件处理器                        */\n/*                                                        */\n/**********************************************************/\nexport default class EventEmitter {\n  constructor() {\n    this.events = {}\n  }\n\n  //绑定事件函数\n  on(eventName, callback) {\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(callback);\n  }\n\n  //触发事件函数\n  emit (eventName, ...args) {\n    const events = this.events[eventName]\n    if (!events) {\n      return\n    }\n\n    events.forEach((event) => {\n      event.apply(null, args)\n    })\n  }\n}\n"],"names":["isInPath","ctx","e","type","parames","beginPath","x","y","radius","radian","moveTo","arc","w","h","rect","ret","isPointInPath","offsetX","offsetY","closePath","drawTables","location","tables","offsetLeft","scaleTop","gridSpacingY","textWidth","tableHeight","length","textAlign","font","fontSize","lastBottomShow","forEach","index","title","fillStyle","chartY","textY","fillText","topShow","bottomShow","thisGridSpacingY","setLineDash","strokeStyle","lineWidth","lineTo","stroke","gridCount","parseInt","gridTop","i","XList","data","map","table","tableIndex","keyName","min","max","setPercentage","pointRadius","pointRadian","difference","pointList","xIndex","name","span","values","setLint","value","percentage","Array","isArray","fill","el","config","options","scaleList","pointAllList","eventList","canvas","document","getElementById","getContext","getCanvasElement","initCanvas","this","width","height","setAttribute","scale","chart","tablesHeight","newChart","Math","PI","setOptions","clear","removeEvents","layout","scaleHeight","fillRect","startY","surplusH","textTop","scaleCount","item","object","keyNames","target","split","readKeyValue","push","drawScale","watchEvents","clearRect","eventName","trigger","tableTrigger","axisXTrigger","pointTrigger","tableNoTrigger","axisXNoTrigger","pointNoTrigger","eventListener","isThisInPointPath","isThisInAxisX","isThisInTable","pointListWidth","tableLocation","axisXLocation","valueIndex","tableOptions","pointLocation","indexs","addEventListener","that","isInTable","isInAxisX","isInPointPath","generateEventListener","emit","removeEventListener","events","callback","args","event","apply"],"mappings":"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"}